# Define the API version and kind of resource
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
# Template metadata. Here's your intro to what this template does.
metadata:
  name: gke-cluster
  title: GCP GKE Cluster
  description: Deploy GCP GKE Cluster using Terraform
# The specification for how the template behaves
spec:
  # Who owns this template. Generally, it could be a team or individual
  owner: user:guest
  # The type of service this template deploys
  type: service
  # User-input parameters. Makes your templates dynamic!
  parameters:
    # Ask the user to input some basic app details
    - title: Provide Details
      required:
        - project
      properties:
        project:
          title: Project ID
          type: string
          description: Unique name for your project
          ui:autofocus: true  # This field gets auto-focused in UI
          ui:options:
            rows: 5  # Number of rows in the input area
    # Ask the user where they want to store the code
    - title: Choose a Repo location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker  # A special UI component for selecting repo URLs
          ui:options:
            allowedHosts:
              - github.com  # Allowed hosts for repository
    # Parameters for setting up the EKS cluster
    - title: Basic GKE Cluster Configuration
      required:
        - container_cluster_name
        - location
        - description
      properties:
        container_cluster_name:
          title: Cluster Name
          type: string
          description: The name of your GKE cluster
          ui:autofocus: true
        location:
          title: Location
          type: string
          description: The GCP location where the cluster will be deployed
          enum:
            - us-central1
            - us-central2
        description:
          title: Description
          type: string
          description: Description of the project
          ui:autofocus: true
  # Steps that the template will execute in order
  steps:
    # Fetch the base template
   - id: fetch-base
     name: Fetch Base
     action: fetch:template
     input:
       url: ./skeleton  # Where the base content is stored
      #  copyWithoutTemplating:
      #    - .github/workflows/*
       values:
         project: ${{ parameters.project }}
         destination: ${{ parameters.repoUrl | parseRepoUrl }}
         container_cluster_name: ${{parameters.container_cluster_name}}
         location: ${{parameters.location}}
         description: ${{parameters.description}}
          
    # Publish the code to a GitHub repo
   - id: publish
     name: Publish
     action: publish:github
     input:
       allowedHosts: ['github.com']
       description: This is ${{ parameters.project }}
       repoUrl: ${{ parameters.repoUrl }}
       repoVisibility: public
       defaultBranch: main
        
    # Trigger a GitHub Action to set up the EKS cluster
   # - id: github-action
    #  name: Trigger GitHub Action
     # action: github:actions:dispatch
      #input:
       # workflowId: manage-eks-cluster.yml  # GitHub Action workflow ID
        #repoUrl: ${{ parameters.repoUrl }}
       # branchOrTagName: 'main'  # The branch to run this action on
        #workflowInputs:
         # clusterName: ${{ parameters.clusterName }}
          #awsRegion: ${{ parameters.region }}
          #action: ${{ parameters.action }}
          
   - id: webhook
     name: Adding webhook to Github Respository
     action: github:webhook
     input: 
       repoUrl: ${{ parameters.repoUrl }}
       webhookUrl: http://10.1.0.228:8080/github-webhook/
       #webhookUrl: http://172.190.72.81:8080/github-webhook/
       events:
       - push
       active: true
       contentType: json    
        
    #- id: jenkinsFolder
      #name: Create Jenkins Folder
      #action: jenkins:folder:create
      #input:
       # repoUrl: ${{ parameters.repoUrl }}
        #folder: gcp-gke-cluster
        #job: ${{ parameters.project }}
        
    #- id: jenkinsJob
      #name: create jenkins Job
      #action: jenkins:customjob:create
      #input:
        #component_id : ${{ parameters.project }}
        #allowedHosts: ['github.com']
        #repoUrl: ${{ parameters.repoUrl }}
        #folder: gcp-gke-cluster
        #job: ${{ parameters.project }}
        
    - id: jenkinsRun
      name: Run Jenkins Job
      action: jenkins:job:run
      input:
        component_id: int-devops-cloud-0224
        allowedHosts: ['github.com']
        repoUrl: ${{ parameters.repoUrl }}
        folder: gcp-gke-cluster
        job: int-devops-cloud-0224
          
    # Register the new component in the Backstage catalog
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'  # Where the catalog info is stored
  # Output links to the user after the template execution
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
